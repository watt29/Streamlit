import streamlit as st
import requests
import pandas as pd

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
NOTION_TOKEN = "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"
DATABASE_ID = "1784dda124a080e5acfaf1eec21a66c6"

# URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Notion API
url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"

# Headers ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": "2021-05-13",  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
    "Content-Type": "application/json",
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Notion API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Pagination
def fetch_notion_data():
    all_data = []  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    next_cursor = None  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ cursor
    
    while True:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cursor ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏±‡∏ô
        payload = {}
        if next_cursor:
            payload['start_cursor'] = next_cursor  # ‡πÉ‡∏ä‡πâ cursor ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà Notion API
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            all_data.extend(data['results'])  # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ next_cursor ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            next_cursor = data.get('next_cursor')  # ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤ cursor ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if not next_cursor:
                break  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ next_cursor ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
        else:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {response.status_code}")
            break
    
    return all_data

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Notion ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏Ç‡∏≠‡∏á Pandas
def convert_to_dataframe(data):
    rows = []
    for result in data:
        try:
            name = result['properties']['‡∏ä‡∏∑‡πà‡∏≠']['title'][0]['text']['content']
            position = result['properties']['‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á']['rich_text'][0]['text']['content']
            phone = result['properties'].get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå', {}).get('phone_number', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
            workplace = result['properties'].get('‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', {}).get('rich_text', [{}])[0].get('text', {}).get('content', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô')
            rows.append([name, phone, position, workplace])
        except KeyError as e:
            st.warning(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {e}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    df = pd.DataFrame(rows, columns=["‡∏ä‡∏∑‡πà‡∏≠", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"])
    return df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
def highlight_search_results(row, search_term):
    return ['background-color: #ffeb3b' if search_term.lower() in str(val).lower() else '' for val in row]

# ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ò‡∏µ‡∏° Streamlit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.markdown(
    """
    <style>
        /* Body Styling */
        body {
            font-size: 14px;  
            line-height: 1.6;
            background-color: #eaf7ff;  /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÄ‡∏¢‡πá‡∏ô‡∏ï‡∏≤ */
            color: #333;
            font-family: 'Arial', sans-serif;
        }

        /* Header */
        h1 {
            font-size: 32px;
            color: #4CAF50;
            font-weight: 600;
            text-align: center;
            padding: 20px 0;
            text-transform: uppercase;
            letter-spacing: 1.5px;
        }

        h2 {
            font-size: 22px;
            color: #444;
            margin-bottom: 30px;
            text-align: center;
        }

        /* Button */
        .stButton>button {
            font-size: 16px;
            padding: 12px 30px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s, box-shadow 0.3s;
        }

        .stButton>button:hover {
            background-color: #45a049;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        /* Input Fields */
        .stTextInput>div>input {
            font-size: 16px;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ccc;
            background-color: #fff;
            margin-bottom: 20px;
            transition: border 0.3s;
        }

        .stTextInput>div>input:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
        }

        /* DataTable Styling */
        .stDataFrame {
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
            font-size: 14px;
            margin-top: 20px;
        }

        .stDataFrame th {
            background-color: #4CAF50;
            color: white;
            font-weight: 600;
            padding: 15px;
        }

        .stDataFrame td {
            font-size: 14px;
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }

        .stDataFrame tr:hover {
            background-color: #f1f1f1;
        }

        .stTextInput {
            width: 100%;
        }

        /* Customizing the "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" Column */
        .stDataFrame td:nth-child(2) {
            font-size: 13px;
            color: #4CAF50;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏î‡πâ‡∏ß‡∏¢ Streamlit
st.markdown("---")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Notion API
data = fetch_notion_data()

# ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if data:
    df = convert_to_dataframe(data)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå, ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)", "")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    st.write("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    if search_term:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        df_filtered = df[df.apply(lambda row: row.astype(str).str.contains(search_term, case=False).any(), axis=1)]
        st.write(f"‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå {len(df_filtered)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '{search_term}'")

        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô highlight ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        st.dataframe(df_filtered.style.apply(lambda row: highlight_search_results(row, search_term), axis=1))
    else:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        st.dataframe(df)

else:
    st.write("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notion")
